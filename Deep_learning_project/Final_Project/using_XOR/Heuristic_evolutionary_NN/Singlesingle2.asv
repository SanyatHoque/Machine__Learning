% function [Accuracy,W1,W1a,W2] =  modRBFawid8g(f,rows1,x1,y,iter);
%SINGLE SINGLE Layer Radial Basis Function

close all;clear all;clc;
iter = 10;
f = 5;   %Number of features in dataset
rows1 = 7;    %Number of rows in dataset
% % x1 = randi([0 10],f,rows1);
% % x1 = load('5layerMLP_dataset.txt');   % Simulated Dataset, normalized
x1 = abs(randn(f,rows1));
x = [x1;ones(1,rows1)];
y  = [0 1 0 0 1 0 1 0 0 1];
alpha = 0.01; %Learning Rate


%% Start Individual
% flag2 = 0;
% Individual = 0;
% for Individual = 1:2
% flag2 = 1
for Individual = 1:5
%% Random Values Weights,
W1 = randi([-1 1],f+1,f)';
% W1a = randi([-1 1],f+1,f)';
W2 =  randi([-1 1],f+1,1)';
%%
min_input_features = 2 ;  %min input feats
in2 = randi([0 1],1,f-min_input_features)';
in1 = randi([1 1],1,min_input_features)';
in = [in1;in2;1];
total_in = sum(in);
input_features = total_in;   %input feats for particular epoch
pin = 0.80;
penalty_factor1 = 1 - ((input_features-min_input_features)*pin);
connection_matrix = [randi([1 1],f+1,1),randi([0 1],f+1,f)];
MG = 0.5;
%%
rows = 1;
n = rows1;
i = 1;
Accuracy(i) = 1;
while (Accuracy(i) < 90) && (i < iter)
% flag2 = 2
% for i = 1:iter
    for j = 1:rows1/n
        m1 = n*(j-1)+1;
        m2 = n*(j-1)+n;       
        for m = m1:m2 
            %% Forward Propagation
            %% 1st Layer
            xx(:,m) = x(:,m).*in;
            a1 = W1*xx(:,m);
            h1 = 1./(1+exp(-a1));
            h1 = [h1; ones(1,rows)];
             %% 2nd Layer
%             a2 = W1a*h1;
%             h2 = 1./(1+exp(-a2));
%             h2 = [h2; ones(1,rows)];
            %% Output Layer
            aa1_3 = W2*h1;
            h11_3 = 1./(1+exp(-aa1_3));
            v1 = (1-h11_3)'*h11_3;
            v2 = (h11_3' - y(m));
            del11_3 = v1*v2;
            %% Backward Propagation
            % Output Layer Weights
            a22 = h1*del11_3;
            W2 = W2'-alpha.*a22;
             %% 2nd Hidden Layer Weights
%             u1 = h2(1:end-1,:)'*(1-h2(1:end-1,:));
%             u2 = del11_3*W2(1:end-1)';
%             u3 = u1*u2;
%             u4 = x(:,m)*u3;
% %             u4 = [u4; ones(extra,f)];
%             W1a = W1a' - alpha.*u4;
            %% 1st Hidden Layer Weights
            s1 = h1(1:end-1,:)'*(1-h1(1:end-1,:))*h1(1:end-1,:)'*(1-h1(1:end-1,:));
            s2 = del11_3*W2(1:end-1)';
            s3 = s1*s2;
            s4 = x(:,m)*s3;
            W1 = W1' - alpha.*s4;
            %%
            Weight_matrix = [W1,W2];
            Weight_matrix = [W1,W2].*connection_matrix;
            W1 = W1';
%             W1a = W1a';
            W2 = W2';
            new_h11_3(m) = h11_3;
            new_y(m) = y(m);
            % test = [h11_3' y(m)]
        end
    end
   % test = [h11_3' y(m)]
    i = i + 1 ; 
    test = [new_h11_3(:) new_y(:)];
    Final_Weight_matrix = Weight_matrix;
% end
for mm = 1:rows1
    if (new_h11_3(mm)>0.5);
        new_new_h11_3(mm) = 1 ;
    else (new_h11_3(mm)<0.5);
        new_new_h11_3(mm) = 0 ;
    end
end
test2 = [new_new_h11_3' new_y'];
true_pos_count = 0 ;
true_neg_count = 0 ;
false_neg_count = 0 ;
false_pos_count = 0;
for mm = 1:rows1
    if (new_new_h11_3(mm)==1 && y(mm)==1);
        true_pos_count = true_pos_count + 1;
    end
    if (new_new_h11_3(mm)==0 && y(mm)==0);
        true_neg_count = true_neg_count + 1;
    end
    if (new_new_h11_3(mm)==1 && y(mm)==0);
        false_pos_count = false_pos_count + 1;
    end
    if (new_new_h11_3(mm)==0 && y(mm)==1);
        false_neg_count = false_neg_count + 1;
    end
end
true_pos_count = true_pos_count;
true_neg_count = true_neg_count;
false_neg_count = false_neg_count;
false_pos_count = false_pos_count;

Accuracy(i) = ((true_pos_count+true_neg_count)/(true_pos_count+true_neg_count+false_neg_count+false_pos_count))*100;
Tot_penalty = Accuracy(i) + penalty_factor1; 
%% Mutation Operators
flag = 0;
if Accuracy(i) <= Accuracy(i-1)
    MG = MG + 0.5;
    P = (MG+1)*0.05;
size_Weight_matrix = size(Weight_matrix);
Mutation_sd_matrix = P.*(randi([-1 1],size_Weight_matrix(1),size_Weight_matrix(2))) ;
Mutation_rate = 5;
Mutation_sd = Weight_matrix + Mutation_rate.*Mutation_sd_matrix ;
%Either Mutate, Node add or delete
% if Accuracy(i) <= Accuracy(i-1)
    flag = 1;
    switch randi([1 3],1,1)
  % switch 2
        case 1
            Weight_matrix = Mutation_sd;   %Mutate
        case 2
            %%  Node addition
            for h = 1:size_Weight_matrix(1)
                for l = 1:size_Weight_matrix(2)
                    if (Weight_matrix(h,l) == 0)
                        Weight_matrix(h,l) = randi([-1 1],1,1);
                    end
                end
            end
        case 3
            %%  Node deletion
            for h = 1:size_Weight_matrix(1)
                for l = 1:size_Weight_matrix(2)
                    if (Weight_matrix(h,l) ~= 0)
                        Weight_matrix(h,l) = Weight_matrix(h,l).*randi([0 1],1,1);
                    end
                end
            end
    end
elseif Accuracy(i) > Accuracy(i-1)
    MG = 0;
    flag = 2;
end
% Weight_matrix     %Test
ind(i).Weight_matrix = Weight_matrix;   
end
% ind(i).Weight_matrix    %Test
% Individual = Individual + 1    %Test
% Accuracy(i)  %Test
%% end Individual 
    population(Individual).species = Individual;
%   population(Individual).Fitness = 1;
    population(Individual).Accuracy = Accuracy(i)
    population(Individual).connection_matrix = ind(i).Weight_matrix;
    population(Individual).input_matrix = in;
    
    if population(Individual).Accuracy < 90;
        break 
    end
end
